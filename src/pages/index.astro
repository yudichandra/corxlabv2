---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';
import { getCollection } from 'astro:content';

const games = (await getCollection('games')).sort((a, b) => +b.data.pubDate - +a.data.pubDate).slice(0, 6);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			/* reset body margin to avoid any white gap */
			body { margin: 0; }
			.hero { position: relative; margin: 0; padding: 0 1rem; background: url('/background.jpg') center 25%/cover no-repeat; color: #fff; 
				/* full-bleed breakout */
				width: 100vw; margin-left: calc(50% - 50vw); margin-right: calc(50% - 50vw);
				min-height: clamp(420px, 75vh, 760px);
				display: grid; place-items: center;
				overflow: hidden;
			}
			.hero::before { content: ""; position: absolute; inset: 0; background: linear-gradient(180deg, rgba(8,12,20,.55) 0%, rgba(8,12,20,.35) 60%, rgba(8,12,20,.55) 100%); pointer-events: none; }
			.hero .inner { position: relative; z-index: 1; max-width: 1200px; margin: 0 auto; text-align: center; padding: 0 1rem; }
			.hero h1 { margin: 0 0 .5rem 0; font-size: clamp(1.9rem, 3.2vw + .5rem, 2.8rem); font-weight: 800; color: #fff; text-shadow: 0 1px 2px rgba(0,0,0,.35); }
			.hero p { color: rgba(255,255,255,.9); }
			@media (max-width: 1024px) {
				.hero { min-height: 60vh; background-position: center 35%; }
			}
			@media (max-width: 640px) {
				.hero { min-height: 50vh; background-position: center 40%; padding: 0 1rem; }
			}
			.hero-typing { display: inline-flex; align-items: center; gap: .25rem; }
			.caret { width: 2px; height: 1.2em; background: currentColor; display: inline-block; translate: 0 .15em; opacity: 1; animation: blink 1s steps(1) infinite; }
			@keyframes blink { 50% { opacity: 0; } }
			.techstack { display: grid; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); gap: 1.25rem; align-items: center; justify-items: center; margin: 1.25rem auto 2rem; max-width: 1200px; }
			.ts-item { display: flex; flex-direction: column; align-items: center; gap: .5rem; text-decoration: none; color: inherit; }
			.ts-logo { width: 140px; height: 140px; display: grid; place-items: center; border-radius: 18px; background: linear-gradient(180deg, rgba(var(--surface),1) 0%, rgba(var(--surface-2),1) 100%); border: 1px solid rgba(var(--border), .35); box-shadow: 0 10px 30px rgba(0,0,0,.35), inset 0 1px 0 rgba(255,255,255,.05); will-change: transform, filter; position: relative; overflow: hidden; cursor: pointer; transform-style: preserve-3d; }
			.ts-logo::after { content: ""; position: absolute; inset: 0; background: radial-gradient(120px 60px at -20% -20%, rgba(255,255,255,.06), transparent 60%), radial-gradient(120px 60px at 120% 120%, rgba(255,255,255,.03), transparent 60%); pointer-events: none; }
			.ts-img { width: 72%; height: 72%; object-fit: contain; transform: translateZ(40px); }
			.sheen { position: absolute; top: -30%; left: -150%; width: 80%; height: 220%; transform: rotate(25deg); background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,.55) 48%, rgba(255,255,255,0) 100%); opacity: 0; mix-blend-mode: screen; pointer-events: none; }
			.ring { position: absolute; left: 50%; top: 50%; width: 20%; height: 20%; transform: translate(-50%, -50%) scale(0); border-radius: 999px; border: 2px solid rgba(100, 170, 255, .8); opacity: 0; pointer-events: none; }
			.ts-name { font-weight: 700; color: rgb(var(--gray-dark)); text-align: center; }
			.center-title { text-align: center; }
			.grid { max-width: 1200px; margin: 0 auto; padding: 0 1rem 2rem; display: grid; grid-template-columns: repeat(4, 1fr); gap: 1rem; }
			.card { background: rgb(var(--surface)); border: 1px solid rgba(var(--border), .35); border-radius: 12px; box-shadow: var(--box-shadow); padding: 1rem; text-decoration: none; color: inherit; display: flex; flex-direction: column; }
			.cover { width: 100%; aspect-ratio: 16/9; object-fit: cover; border-radius: 8px; background: rgb(var(--surface)); }
			.card h3 { margin-top: .75rem; }
			.card p { margin: 0; color: rgb(var(--gray)); }
			.section-title { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }
			.section-block { position: relative; padding-top: 4rem; margin-top: 2.5rem; }
			.section-block::before { content: ""; position: absolute; left: 0; right: 0; top: 0; height: 1px; background: linear-gradient(90deg, rgba(255,255,255,0), rgba(var(--border), .35), rgba(255,255,255,0)); }
			.games-section .section-title { margin-bottom: 1rem; }
			.games-section .grid { padding-top: 0; gap: 1.25rem; }
			.games-section .card { padding: .75rem; }
			.games-section .cover { margin-bottom: .5rem; border-radius: 10px; aspect-ratio: 5 / 4; }
			.games-section .card h3 { margin: .25rem 0 0; }
			.games-section .card p { display: none; }
			@media (max-width: 1280px) { .grid { grid-template-columns: repeat(3, 1fr); } .techstack { grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); } }
			@media (max-width: 1024px) { .grid { grid-template-columns: repeat(2, 1fr); } .techstack { grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); } .ts-logo { width: 120px; height: 120px; }
			@media (max-width: 640px) { .grid { grid-template-columns: 1fr; } .techstack { grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: .75rem; } .ts-logo { width: 100px; height: 100px; } .games-section .cover { aspect-ratio: 4 / 3; } }
			@media (prefers-reduced-motion: reduce) { .ts-logo { transition: none !important; } }
			/* Tech Stack title visuals (centered) */
			#techstack-title { display: block; position: relative; cursor: pointer; margin: 0 auto; width: max-content; text-align: center; }
			#techstack-title .title-underline { content: ""; position: absolute; left: 50%; transform: translateX(-50%); bottom: -6px; height: 2px; width: 58%; background: linear-gradient(90deg, var(--accent), transparent 80%); border-radius: 2px; opacity: .9; }
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section class="hero">
				<div class="inner">
					<h1>
						We <span class="hero-typing"> <span id="hero-dynamic">are CORXLAB</span><span class="caret" aria-hidden="true"></span> </span>
					</h1>
					<p>Indie game developer studio. Read our devlog and news, and discover our games.</p>
				</div>
			</section>

			<section class="section-block">
				<h2 id="techstack-title" class="section-title page-title center-title"><span class="title-text">Tech Stack</span><span class="title-underline" aria-hidden="true"></span></h2>
				<div class="techstack" id="techstack">
				<a class="ts-item" href="https://unity.com/" target="_blank" rel="noopener" title="Unity official website">
					<div class="ts-logo" data-anim data-color="#222222">
						<span class="sheen" aria-hidden="true"></span>
						<img class="ts-img" src="https://cdn.simpleicons.org/unity/000000" alt="Unity" loading="lazy" />
					</div>
					<span class="ts-name">Unity</span>
				</a>
				<a class="ts-item" href="https://www.unrealengine.com/" target="_blank" rel="noopener" title="Unreal Engine official website">
					<div class="ts-logo" data-anim data-color="#000000">
						<span class="sheen" aria-hidden="true"></span>
						<img class="ts-img" src="https://cdn.simpleicons.org/unrealengine/000000" alt="Unreal Engine" loading="lazy" />
					</div>
					<span class="ts-name">Unreal Engine</span>
				</a>
				<a class="ts-item" href="https://godotengine.org/" target="_blank" rel="noopener" title="Godot official website">
					<div class="ts-logo" data-anim data-color="#478CBF">
						<span class="sheen" aria-hidden="true"></span>
						<img class="ts-img" src="https://cdn.simpleicons.org/godotengine/478CBF" alt="Godot" loading="lazy" />
					</div>
					<span class="ts-name">Godot</span>
				</a>
				<a class="ts-item" href="https://dotnet.microsoft.com/" target="_blank" rel="noopener" title=".NET official website">
					<div class="ts-logo" data-anim data-color="#512BD4">
						<span class="sheen" aria-hidden="true"></span>
						<img class="ts-img" src="https://cdn.simpleicons.org/dotnet/512BD4" alt=".NET" loading="lazy" />
					</div>
					<span class="ts-name">.NET</span>
				</a>
				<a class="ts-item" href="https://gsap.com/" target="_blank" rel="noopener" title="GSAP (GreenSock) official website">
					<div class="ts-logo" data-anim data-color="#88CE02">
						<span class="sheen" aria-hidden="true"></span>
						<img class="ts-img" src="https://cdn.simpleicons.org/greensock/88CE02" alt="GSAP" loading="lazy" />
					</div>
					<span class="ts-name">GSAP</span>
				</a>
				<a class="ts-item" href="https://astro.build/" target="_blank" rel="noopener" title="Astro official website">
					<div class="ts-logo" data-anim data-color="#FF5D01">
						<span class="sheen" aria-hidden="true"></span>
						<img class="ts-img" src="https://cdn.simpleicons.org/astro/FF5D01" alt="Astro" loading="lazy" />
					</div>
					<span class="ts-name">Astro</span>
				</a>
				<a class="ts-item" href="https://kotlinlang.org/lp/multiplatform/" target="_blank" rel="noopener" title="Kotlin Multiplatform official website">
					<div class="ts-logo" data-anim data-color="#7F52FF">
						<span class="sheen" aria-hidden="true"></span>
						<img class="ts-img" src="https://cdn.simpleicons.org/kotlin/7F52FF" alt="Kotlin Multiplatform" loading="lazy" />
					</div>
					<span class="ts-name">Kotlin Multiplatform</span>
				</a>
			</div>
			</section>

			<section class="section-block games-section">
				<h2 id="games-title" class="section-title page-title center-title"><span class="title-text">Game Showcase</span></h2>
				<div class="grid">
				{games.map(({ id, data }) => (
					<a class="card" href={`/games/${id}/`}>
						{data.coverPath ? (
						<img class="cover" src={data.coverPath} alt={data.title} />
					) : data.coverImage ? (
						typeof data.coverImage === 'string' ? (
							<img class="cover" src={data.coverImage} alt={data.title} />
						) : (
							<img class="cover" src={data.coverImage.src} alt={data.title} width={data.coverImage.width} height={data.coverImage.height} />
						)
					) : (
						<div class="cover" />
					)}
						<h3>{data.title}</h3>
						<p>{data.description}</p>
					</a>
				))}
				</div>
			</section>
		</main>
		<Footer />
		<!-- GSAP for fluid tech stack animation -->
		<script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js" defer></script>
		<script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/TextPlugin.min.js" defer></script>
		<script defer>
			document.addEventListener('DOMContentLoaded', () => {
				if (!window.gsap) return;
				// Register GSAP TextPlugin if available
				if (window.gsap && window.gsap.registerPlugin && window.TextPlugin) {
					gsap.registerPlugin(TextPlugin);
				}
				// Performance guard for sparks
				let ACTIVE_SPARKS = 0;
				const MAX_SPARKS = 140; // cap simultaneous sparks
				// Color utils
				const clamp01 = (v) => Math.max(0, Math.min(1, v));
				function hexToRgb(hex) {
					hex = hex.replace('#','');
					if (hex.length === 3) hex = hex.split('').map(c=>c+c).join('');
					const num = parseInt(hex, 16);
					return { r: (num>>16)&255, g: (num>>8)&255, b: num&255 };
				}
				function rgbToHsl(r, g, b) {
					r/=255; g/=255; b/=255;
					const max = Math.max(r,g,b), min = Math.min(r,g,b);
					let h, s, l = (max+min)/2;
					if (max === min) { h = s = 0; }
					else {
						const d = max - min;
						s = l > 0.5 ? d/(2-max-min) : d/(max+min);
						switch(max){
							case r: h = (g-b)/d + (g < b ? 6 : 0); break;
							case g: h = (b-r)/d + 2; break;
							case b: h = (r-g)/d + 4; break;
						}
						h /= 6;
					}
					return { h: h*360, s: s*100, l: l*100 };
				}
				function hexToHsl(hex) {
					const {r,g,b} = hexToRgb(hex);
					return rgbToHsl(r,g,b);
				}
				function hslString(h, s, l) { return `hsl(${Math.round(h)}, ${Math.round(s)}%, ${Math.round(l)}%)`; }
				const items = Array.from(document.querySelectorAll('[data-anim]'));

				// Advanced idle animation (float + rotate + breathing glow)
				items.forEach((el, i) => {
					const delay = 0.12 * i;
					const dx = 3 + Math.random() * 5; // 3-8px
					const dy = 5 + Math.random() * 7; // 5-12px
					const rot = (Math.random() - 0.5) * 4; // -2 to 2
					const tl = gsap.timeline({ repeat: -1, yoyo: true, defaults: { ease: 'sine.inOut' }, delay });
					tl.to(el, { x: dx, y: dy, duration: 2.2 + Math.random() * 1.4 }, 0)
					  .to(el, { rotation: rot, duration: 2.8 + Math.random() * 1.2 }, 0)
					  .to(el, { boxShadow: '0 10px 26px rgba(50,100,255,.14)', duration: 2.2 }, 0);
					el._idleTl = tl; // store for cleanup
				});

				// Hover interactions: 3D tilt + sheen sweep + ripple + sparkles
				items.forEach((el) => {
					let hoverTl; const color = el.dataset.color || '#6AA6FF';
					const img = el.querySelector('.ts-img');
					const sheen = el.querySelector('.sheen');
					const maxTilt = 14; // deg (more extreme)

					const onMove = (e) => {
						const rect = el.getBoundingClientRect();
						const cx = rect.left + rect.width / 2;
						const cy = rect.top + rect.height / 2;
						const dx = (e.clientX - cx) / (rect.width / 2);
						const dy = (e.clientY - cy) / (rect.height / 2);
						const rotY = gsap.utils.clamp(-1, 1, dx) * maxTilt;
						const rotX = -gsap.utils.clamp(-1, 1, dy) * maxTilt;
						gsap.to(el, { duration: 0.16, rotateY: rotY, rotateX: rotX, transformPerspective: 700 });
						gsap.to(img, { duration: 0.16, x: -dx * 6, y: -dy * 6 }); // slight parallax
					};

					const burst = () => {
						// Rare super burst
						const superBurst = Math.random() < 0.12;
						const n = superBurst ? (28 + Math.floor(Math.random()*13)) : (14 + Math.floor(Math.random()*9)); // 28-40 else 14-22
						for (let i = 0; i < n; i++) {
							if (ACTIVE_SPARKS >= MAX_SPARKS) break; // performance cap
							const s = document.createElement('span');
							s.className = 'spark';
							const size = 6 + Math.random()*14; // 6-20px
							Object.assign(s.style, {
								position:'absolute', left:'50%', top:'50%', width:`${size}px`, height:`${size}px`, borderRadius:'50%',
								// Use currentColor trick to build gradient highlights
								color: (() => {
									// Randomize hue around base color
									let base = color;
									try {
										const {h,s,l} = hexToHsl(base);
										const hueShift = (Math.random()*56) - 28; // -28 to +28 deg
										return hslString((h + hueShift + 360)%360, clamp01(s/100)*100, clamp01(l/100)*100);
									} catch {
										return base; // fallback
									}
								})(),
								background: 'radial-gradient(circle, currentColor 0%, rgba(255,255,255,0.75) 55%, rgba(255,255,255,0) 100%)',
								filter:'brightness(1.1)', pointerEvents:'none',
								boxShadow:'0 0 10px currentColor, 0 0 18px currentColor',
								mixBlendMode:'screen', willChange:'transform, opacity'
							});
							el.appendChild(s);
							ACTIVE_SPARKS++;
							const angle = Math.random()*Math.PI*2;
							const dist = (superBurst ? 45 : 35) + Math.random()*(superBurst ? 85 : 65); // 45-130 in super
							const x = Math.cos(angle)*dist;
							const y = Math.sin(angle)*dist;
							const travel = 0.9 + Math.random()*0.9; // 0.9 - 1.8s
							const hold = 0.3 + Math.random()*0.5; // 0.3 - 0.8s hold
							const fade = 0.8 + Math.random()*0.6; // 0.8 - 1.4s fade
							const delay = Math.random()*0.15; // slight staggering
							// Jitter during travel: subtle spin and scale pulse
							const jitterDur = 0.18 + Math.random()*0.22;
							const rotAmp = 6 + Math.random()*12;
							const scaleHi = 1.05 + Math.random()*0.08;
							const jitterRepeats = Math.ceil((travel + hold + fade) / jitterDur);
							const spin = gsap.to(s, { rotation: `+=${rotAmp}`, duration: jitterDur, repeat: jitterRepeats, yoyo: true, ease: 'sine.inOut' });
							const pulse = gsap.to(s, { scale: scaleHi, duration: jitterDur*1.1, repeat: Math.ceil((travel + hold + fade)/(jitterDur*1.1)), yoyo: true, ease: 'sine.inOut' });
							const tl = gsap.timeline({ delay, onComplete: () => { spin.kill(); pulse.kill(); s.remove(); ACTIVE_SPARKS = Math.max(0, ACTIVE_SPARKS-1); } });
							tl.to(s, { x, y, opacity: 1, duration: travel, ease: 'power1.out' })
							  .to(s, { opacity: 0, scale: 0.35, duration: fade, ease: 'sine.in' }, '+=' + hold);
						}
					};

					const ripple = () => {
						const ring = document.createElement('span');
						ring.className = 'ring';
						ring.style.borderColor = color;
						el.appendChild(ring);
						gsap.to(ring, { scale: 2.6, opacity: 0, duration: 0.8, ease:'sine.out', onComplete: () => ring.remove() });
					};

					el.addEventListener('mouseenter', () => {
						el._idleTl && el._idleTl.pause();
						hoverTl && hoverTl.kill();
						hoverTl = gsap.timeline({ defaults: { ease: 'sine.out' } });
						hoverTl
						  .to(el, { duration: 0.16, y: '-=8', scale: 1.08, boxShadow: `0 18px 40px ${color}33` }, 0)
						  .to(sheen, { duration: 0.55, opacity: 1, x: '260%', ease:'power2.out' }, 0)
						  .to(sheen, { duration: 0.2, opacity: 0 }, '>-0.1');
						window.addEventListener('mousemove', onMove);
						ripple();
						burst();
					});

					el.addEventListener('mouseleave', () => {
						hoverTl && hoverTl.kill();
						window.removeEventListener('mousemove', onMove);
						gsap.to([el, img], { duration: 0.4, x: 0, y: 0, ease: 'power2.out' });
						gsap.to(el, { duration: 0.45, scale: 1, rotate: 0, rotateX: 0, rotateY: 0, boxShadow: '0 6px 20px rgba(0,0,0,.06)', ease: 'power2.inOut', onComplete: () => el._idleTl && el._idleTl.resume() });
						gsap.set(sheen, { x: '-150%', opacity: 0 });
					});

					// Keyboard accessibility
					el.addEventListener('focus', () => el.dispatchEvent(new Event('mouseenter')));
					el.addEventListener('blur', () => el.dispatchEvent(new Event('mouseleave')));
				});

				// Tech Stack title: GSAP scramble text effect (centered)
				const titleEl = document.getElementById('techstack-title');
				if (titleEl) {
					const textEl = titleEl.querySelector('.title-text');
					const prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
					const ORIGINAL_TEXT = (textEl && textEl.textContent) || 'Tech Stack';
					const CHARS = '!<>-_/\\[]{}=+*^?#@%&$';
					let running = null; // { kill: fn }
					function scrambleTo(newText, duration = 0.8) {
						if (!textEl || !window.gsap) return;
						if (prefersReduced) { textEl.textContent = newText; return; }
						// cancel previous
						running && running.kill && running.kill();
						const from = textEl.textContent || '';
						const maxLen = Math.max(from.length, newText.length);
						const queue = Array.from({ length: maxLen }).map((_, i) => {
							return {
								from: from[i] || '',
								to: newText[i] || '',
								start: Math.floor(Math.random() * 10),
								end: Math.floor(Math.random() * 10) + 10
							};
						});
						const state = { frame: 0 };
						const render = () => {
							let output = '';
							for (let i = 0; i < queue.length; i++) {
								const { from, to, start, end } = queue[i];
								if (state.frame >= end) {
									output += to;
								} else if (state.frame >= start) {
									output += CHARS[Math.floor(Math.random() * CHARS.length)];
								} else {
									output += from;
								}
							}
							textEl.textContent = output;
						};
						const totalFrames = 24; // base frames; real time controlled by gsap duration
						const tween = gsap.to(state, {
							frame: totalFrames,
							duration,
							ease: 'none',
							onUpdate: render,
							onComplete: () => { textEl.textContent = newText; running = null; }
						});
						running = { kill: () => tween.kill() };
					}
					const onEnter = () => scrambleTo(ORIGINAL_TEXT, 0.8);
					const onLeave = () => scrambleTo(ORIGINAL_TEXT, 0.45);
					titleEl.addEventListener('mouseenter', onEnter);
					titleEl.addEventListener('mouseleave', onLeave);
					titleEl.addEventListener('focus', onEnter);
					titleEl.addEventListener('blur', onLeave);
				}

				// Game Showcase title: GSAP scramble text effect
				const gamesTitleEl = document.getElementById('games-title');
				if (gamesTitleEl) {
					const textEl = gamesTitleEl.querySelector('.title-text');
					const prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
					const ORIGINAL_TEXT = (textEl && textEl.textContent) || 'Game Showcase';
					const CHARS = '!<>-_/\\[]{}=+*^?#@%&$';
					let running = null;
					function scrambleTo(newText, duration = 0.8) {
						if (!textEl || !window.gsap) return;
						if (prefersReduced) { textEl.textContent = newText; return; }
						running && running.kill && running.kill();
						const from = textEl.textContent || '';
						const maxLen = Math.max(from.length, newText.length);
						const queue = Array.from({ length: maxLen }).map((_, i) => ({
							from: from[i] || '',
							to: newText[i] || '',
							start: Math.floor(Math.random() * 10),
							end: Math.floor(Math.random() * 10) + 10,
						}));
						const state = { frame: 0 };
						const render = () => {
							let output = '';
							for (let i = 0; i < queue.length; i++) {
								const { from, to, start, end } = queue[i];
								if (state.frame >= end) output += to;
								else if (state.frame >= start) output += CHARS[Math.floor(Math.random() * CHARS.length)];
								else output += from;
							}
							textEl.textContent = output;
						};
						const tween = gsap.to(state, { frame: 24, duration, ease: 'none', onUpdate: render, onComplete: () => { textEl.textContent = newText; running = null; } });
						running = { kill: () => tween.kill() };
					}
					const onEnter = () => scrambleTo(ORIGINAL_TEXT, 0.8);
					const onLeave = () => scrambleTo(ORIGINAL_TEXT, 0.45);
					gamesTitleEl.addEventListener('mouseenter', onEnter);
					gamesTitleEl.addEventListener('mouseleave', onLeave);
					gamesTitleEl.addEventListener('focus', onEnter);
					gamesTitleEl.addEventListener('blur', onLeave);
				}

				// Hero dynamic typing: keep 'We' static, animate suffix
				const phrases = [
					'are CORXLAB',
					'make games',
					'make apps',
					'craft experiences',
				];
				const elText = document.getElementById('hero-dynamic');
				let idx = 0;
				const typeSpeed = 0.04; // seconds per char
				const hold = 1.2; // seconds hold after type
				const eraseSpeed = 0.03;

				function cycle() {
					const next = phrases[idx % phrases.length];
					const prev = elText.textContent || '';
					// Erase previous
					const eraseTl = gsap.timeline();
					eraseTl.to(elText, { duration: Math.max(prev.length * eraseSpeed, 0.3), text: '' });
					// Type next
					eraseTl.to(elText, { duration: Math.max(next.length * typeSpeed, 0.4), text: next, ease: 'none' });
					eraseTl.to({}, { duration: hold });
					eraseTl.call(() => { idx++; cycle(); });
				}
				if (window.TextPlugin) {
					cycle();
				}
			});
		</script>
	</body>
</html>
